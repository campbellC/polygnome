The overall design is as follows, based on the composite design pattern. 

Need to decide how to encapsulate the algebra behaviour. If we have an algebra being a set of relations and that's all it is. Assume the user will know not to mingle symbols from different algebras.

Each abstractPolynomial has an algebra field which determines what algebra it belongs to. We will never copy this field so shouldn't use up lots of memory.

abstractPolynomial is based on the composite design pattern, but they should be immutable or rather should act as though immutable. So the sort function should return a new polynomial.

The leaves are generators and coefficients. #BAD DESIGN

generators are not polynomials. I should instead make a class that is a symbol. It exists outside of any algebra and has no algebraic properties whatsoever. All it can do is print itself so it needs a name and that's it.

A generator has a symbol but also has an algebra - it is a symbol in the context of an algebra.
A coefficient is an abstractPolynomial but does not have an algebra context since it's basically an element of the base field.

A monomial is a combination of generators and a coefficient.

A polynomial is combination of monomials.


Leave Tensors aside for now!
A pure tensor is a combination of polynomials.

A tensor is a combination of pure tensors and is to pure tensor as polynomial is to monomial.


symbol
--------
Has a name which is string + optional number
equality if string and number are equal 

relation 
___________
has a list of symbols
has a list of list of symbols and coefficients

algebra
----------------
has a list of relations
given two generators tells you if any relation acts
has a method to return output interpreted in the context of itself!



generator 
-----------
has a symbol
has an algebra





polynomial
--------------------
-put into pbw order
-iterate through monomials
-test if zero
-test if in pbw order
-multiply on left or right by any abstractPolynomial

monomial
---------------
-put into pbw order
-iterate through symbols?
-test if zero
-test if in pbw order 
-multiply on left or right by any abstractPolynomial

generators
-----------------
- for now just a string pretty much


coefficients
---------------
- order by variables
- multiply etc
- iterate through 'monomials'
- multiply on left or right by any abstractPolynomial



Use case:
In first file
define symbols x1 x2
define relations x1 x2 = x2 x1 by making tuples (x1,x2) and ((1,x2,x1),) 
make algebra with these relations
make generators from these symbols with names x1 x2
In second file:
import above
(x1 * x2).sort()
